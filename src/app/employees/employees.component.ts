import { Component, OnInit } from '@angular/core';
import { EmployeeService } from '../services/employee.service';
import { Employee, Department, Company, Salary } from '../models';

@Component({
  selector: 'app-employees',
  templateUrl: './employees.component.html',
  styleUrls: ['./employees.component.css']
})
export class EmployeesComponent implements OnInit {
  employees: Employee[] = [];
  departments: Department[] = [];
  companies: Company[] = [];
  salaries: Salary[] = [];
  
  newEmployee: Omit<Employee, 'id'> = {
    name: '',
    departmentId: 1,
    companyId: 1,
    salaryId: 0
  };
  
  editEmployeeId: number | null = null;

  constructor(private employeeService: EmployeeService) {}

  ngOnInit(): void {
    this.loadEmployees();
    this.loadDepartments();
    this.loadCompanies();
    this.loadSalaries();
  }

  loadEmployees(): void {
    this.employeeService.getEmployees().subscribe(employees => {
      this.employees = employees;
    });
  }

  loadDepartments(): void {
    this.employeeService.getDepartments().subscribe(departments => {
      this.departments = departments;
    });
  }

  loadCompanies(): void {
    this.employeeService.getCompanies().subscribe(companies => {
      this.companies = companies;
    });
  }

  loadSalaries(): void {
    this.employeeService.getSalaries().subscribe(salaries => {
      this.salaries = salaries;
    });
  }

  addEmployee(): void {
    if (this.newEmployee.name && this.newEmployee.departmentId) {
      if (this.editEmployeeId) {
        // Update existing employee
        const updatedEmployee: Employee = {
          id: this.editEmployeeId, // Use the existing ID
          ...this.newEmployee
        };

        this.employeeService.updateEmployee(updatedEmployee).subscribe(() => {
          this.loadEmployees();
          this.resetForm();
        });
      } else {
        // Add new employee
        const employeeToAdd: Employee = {
          id: 0, // ID will be generated by the server
          ...this.newEmployee
        };

        this.employeeService.addEmployee(employeeToAdd).subscribe(() => {
          this.loadEmployees();
          this.resetForm();
        });
      }
    } else {
      console.error('Employee name and department ID are required.');
    }
  }

  editEmployee(employee: Employee): void {
    this.newEmployee = {
      name: employee.name,
      departmentId: employee.departmentId,
      companyId: employee.companyId,
      salaryId: employee.salaryId
    };
    this.editEmployeeId = employee.id; // Set the ID for updating
  }

  deleteEmployee(id: number): void {
    this.employeeService.deleteEmployee(id).subscribe(() => {
      this.loadEmployees();
    });
  }

  resetForm(): void {
    this.newEmployee = {
      name: '',
      departmentId: 1,
      companyId: 1,
      salaryId: 0
    };
    this.editEmployeeId = null; // Reset the edit ID
  }
}