import { Component, OnInit } from '@angular/core';
import { DepartmentService } from '../services/department.service';
import { Department } from '../models';

@Component({
  selector: 'app-departments',
  templateUrl: './departments.component.html',
  styleUrls: ['./departments.component.css']
})
export class DepartmentsComponent implements OnInit {
  departments: Department[] = [];
  newDepartment: Omit<Department, 'id'> = {
    name: '' // Initialize without employees
  };
  editDepartmentId: number | null = null;

  constructor(private departmentService: DepartmentService) {}

  ngOnInit(): void {
    this.loadDepartments();
  }

  loadDepartments(): void {
    this.departmentService.getDepartments().subscribe(departments => {
      this.departments = departments;
    });
  }

  addDepartment(): void {
    if (this.newDepartment.name) {
      const departmentToAdd: Department = {
        id: 0, // ID will be generated by the server
        ...this.newDepartment
      };

      this.departmentService.addDepartment(departmentToAdd).subscribe(() => {
        this.loadDepartments(); // Refresh the list
        this.resetForm();
      });
    }
  }

  editDepartment(department: Department): void {
    this.newDepartment = { ...department }; // No employees to include
    this.editDepartmentId = department.id;
  }

  updateDepartment(): void {
    if (this.editDepartmentId) {
      this.departmentService.updateDepartment({ id: this.editDepartmentId, ...this.newDepartment })
        .subscribe(() => {
          this.loadDepartments(); // Refresh the list
          this.resetForm();
        });
    }
  }

  deleteDepartment(id: number): void {
    this.departmentService.deleteDepartment(id).subscribe(() => {
      this.loadDepartments(); // Refresh the list
    });
  }

  resetForm(): void {
    this.newDepartment = {
      name: '' // Reset without employees
    };
    this.editDepartmentId = null;
  }
}